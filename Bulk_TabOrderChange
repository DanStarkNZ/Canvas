import requests # https://pypi.org/project/requests/
import json

# API Token
# Instructions to generate a token: https://community.canvaslms.com/t5/Admin-Guide/How-do-I-manage-API-access-tokens-as-an-admin/ta-p/89 
#token      = "17~Z6rMS2eLO2S5ruKtQ1hEeQo5ipqqUYp9Ps0MKEmSU7xtJZZKT1AGU5LIybflDRhF" 
token       = "13824~lhKxcNGKIfnnsGANWxwneMJ8PBnq9AaT0Ij6ZHjvI7YmQ2XFWN5McWNlmlZLYSnp" #zbogner

# API User requires permissions to do the following:
# - Act as user
# - courses - manage login details
# - courses - view list

# Canvas URL
#domain     = "dstark.instructure.com"
domain      = "zbogner.beta.instructure.com"

# Subaccount to target (default = '1')
#account_id = '1'
account_id = '44'


##############################################################################


REQUEST_HEADERS    = {'Authorization' : 'Bearer ' + '%s' % token}
API = 'https://' + domain + '/api/v1/'


# Get all courses
courses = []
courses_endpoint = API + 'accounts/%s/courses' % (account_id)

# Results are paginated. Iterate over pages until all records retrieved 
not_done = True
while not_done:
    courses_request = requests.get(courses_endpoint,headers=REQUEST_HEADERS)
    courses+=courses_request.json()
    courses_formatted_json = json.dumps(courses, indent=2)
    print(courses_formatted_json)
    print(courses_request.links)
    if 'next' in courses_request.links.keys():
        courses_endpoint = courses_request.links['next']['url']
    else:
        not_done = False

# Print how many courses were found
print ("=> Done getting courses. " + str(len(courses)) + " courses found")

# Load the response as JSON
response_data = courses

# Exit if there were no courses in the returned data
if not response_data:
  print ('No courses found.')
  exit(0)

# Loop through the courses, populating the course_ids list with their ids
course_ids = [s['id'] for s in response_data]
for course in course_ids:

    #update the Studio tab in each course to position 4
    tool_id = "context_external_tool_244"
    tool_pos = "4"
    print("=> Updating course: '%s' Tab: '%s' Position: '%s'" % (course, tool_id, tool_pos)) #debugging 
    position_endpoint = API + 'courses/%s/tabs/%s?position=%s&hidden=false' % (course, tool_id, tool_pos)
    position_request = requests.put(position_endpoint, headers=REQUEST_HEADERS)
    print(position_request.json()) #debugging
    print("") # debugging (line break)

    #update the Zoom tab in each course to position 4
    tool_id = "context_external_tool_3"
    tool_pos = "5"
    print("=> Updating course: '%s' Tab: '%s' Position: '%s'" % (course, tool_id, tool_pos)) #debugging 
    position_endpoint = API + 'courses/%s/tabs/%s?position=%s&hidden=false' % (course, tool_id, tool_pos)
    position_request = requests.put(position_endpoint, headers=REQUEST_HEADERS)
    print(position_request.json()) #debugging
    print("") # debugging (line break)

    print("----") #debugging

print ("tab update complete")
